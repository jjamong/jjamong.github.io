(function(){const pages=[{"idx":0,"href":"/docs/blog/","title":"blog","content":""},{"idx":1,"href":"/docs/blog/architecture/single/","title":"단일서버","content":" 단일서버 가장 기본적인 서버 구성으로 테스트 서버나, 간단한고 작은 서비스를 할 때 많이 사용된다.\n클라이언트는 웹, 애플리케이션은 웹서버, 데이터베이스는 Mysql과 같은 RDB 등으로 생각할 수 있다.\n장점\n 환경 구축이 쉬움  단점\n 전체 서비스에 장애가 생길 확률이 높음 =\u0026gt; 애플리케이션, 데이터베이스가 같은 자원(CPU, 메모리 등)을 공유하므로 둘 중 하나라도 자원을 모두 사용하거나, 서버 장애가 발생하면 전체 서비스가 완전히 죽는다.\n 서버 자원을 효율적으로 사용하기 어렵다. =\u0026gt; 애플리케이션, 데이터베이스가 각 속성에 따라 더 중요한 최적화를 필요한 설정이 다를 수 있음\n 보안 취약 =\u0026gt; 테이터 베이스는 보안상 포트나 IP등 접속 지점을 최소화, 웹은 특성상 다양한 IP 포트에 대해 요청받아야 함.\n 스케일 아웃(서버확장)이 어렵다. =\u0026gt; 서버가 여러대 되면 클라이언트가 여러대의 서버들의 주소를 모두 알아야 하므로 관리 어려움.\n  "},{"idx":2,"href":"/docs/blog/architecture/","title":"아키텍처 이해","content":" 아키텍처의 이해 서비스에 따른 애플리케이션, DB 서버 구성. 로드밸런서 구조를 설명\n단일서버 가장 기본적인 서버 구성으로 테스트 서버나, 간단한고 작은 서비스를 할 때 많이 사용된다.\n애플리케이션/데이터베이스 서버 분리 단일 서버 구성에서 데이터베이스를 별도의 서버로 분리한 구성.\n단일서버의 단점인 전체 서비스 장애 확률, 효율적인 자원 사용, 보안취약이 해결된다.\n로드밸런서 클라이언트는 로드 밸런서 서버와 통신하고 그 뒤에 여러 애플리케이션 서버를 두는 구성.\n"},{"idx":3,"href":"/docs/aws/","title":"aws","content":" AWS(Amazon Web Service) "},{"idx":4,"href":"/docs/hugo/","title":"Hugo","content":" Hugo Static Site Generator\n정보 사이트 : https://gohugo.io/\n설치 사이트 : https://github.com/gohugoio/hugo/releases\n명령어 hugo 프로젝트 생성 (project 프로젝트명)\nhugo new site project  로컬서버 실행 localhost:1313\nhugo server -D  빌드하여 public폴더에 생성한다. (theme 테마명))\nhugo -t theme  "},{"idx":5,"href":"/docs/infra/","title":"infra","content":" INFRA 하드웨어, OS, 미들웨어, 네트워크 등의 시스템 기반\nHardware 하드웨어 서버 장비 본체나 데이터를 저장하기 위한 스토리지, 전원 장치 인프라 가장 low-level. CPU, 메모리, 데이터 스토리지 등\nNetwork 사용자가 원격으로 접근할 수 있도록 서버를 연결하는 도구들 MAC주소, IP주소 등\nOS 하드웨어와 네트워크 장비를 제어하기 위한 기본적인 소프트웨어 window, Linux 등\nMiddleware 미들웨어 웹서버, DBMS, 시스템 모니터링 툴등 비즈니스를 처리하는 애플리케이션의 각종 소프트웨어\n시스템 모니터링 System Monitoring Zabbix, Datadog, Mackerel 등\n"},{"idx":6,"href":"/docs/blog/architecture/separation/","title":"애플리케이션/데이터베이스 서버 분리","content":" 애플리케이션/데이터베이스 서버 분리 단일 서버 구성에서 데이터베이스를 별도의 서버로 분리한 구성.\n단일서버의 단점인 전체 서비스 장애 확률, 효율적인 자원 사용, 보안취약이 해결된다.\n장점\n 전체 서비스에 장애가 생길 확률이 높음이 개선 효율적인 자원 사용 개선 보안 취약 개선  단점\n 관리서버 증가. 네트워크 보안 고려. 스케일 아웃(서버확장)이 어렵다.  "},{"idx":7,"href":"/docs/blog/architecture/loadbalancer/","title":"로드 밸런서","content":" 로드 밸런서 클라이언트는 로드 밸런서 서버와 통신하고 그 뒤에 여러 애플리케이션 서버를 두는 구성.\n장점\n 스케일 아웃이 가능. 애플리케이션 서버 중 일부 서버에 장애 발생 시 대응 가능 =\u0026gt; 정상 서버에만 요청을 가능하도록 할 수 있음.  단점\n 로드밸런서 서버 장애 시 연결된 모든 애플리케이션 서버 장애. =\u0026gt; 로드밸런서 서버를 통해 모든 요청과 응답이 이뤄지므로 애플리케이션 서버가 정상이여도 로드밸런서 서버가 장애가 날 경우 전체 서비스에 영향  "},{"idx":8,"href":"/categories/","title":"Categories","content":""},{"idx":9,"href":"/docs/","title":"Docs","content":""},{"idx":10,"href":"/","title":"Introduction","content":"main\n"},{"idx":11,"href":"/tags/","title":"Tags","content":""}];window.bookSearch={pages:pages,idx:lunr(function(){this.ref("idx");this.field("title");this.field("content");pages.forEach(this.add,this);}),}})();