(function(){const pages=[{"idx":0,"href":"/docs/blog/","title":"blog","content":""},{"idx":1,"href":"/docs/blog/aws/ec2/","title":"EC2","content":" EC2 (Elastic Compute Cloud) 위치 서비스 \u0026gt; 컴퓨터 \u0026gt; EC2 EC2는 컴퓨터 스펙(CPU, HD) 등을 설정하고 OS를 설치하여 컴퓨터를 제공받음\n"},{"idx":2,"href":"/docs/blog/architecture/single/","title":"단일서버","content":" 단일서버 가장 기본적인 서버 구성으로 테스트 서버나, 간단한고 작은 서비스를 할 때 많이 사용된다.\n클라이언트는 웹, 애플리케이션은 웹서버, 데이터베이스는 Mysql과 같은 RDB 등으로 생각할 수 있다.\n장점\n 환경 구축이 쉬움  단점\n 전체 서비스에 장애가 생길 확률이 높음 =\u0026gt; 애플리케이션, 데이터베이스가 같은 자원(CPU, 메모리 등)을 공유하므로 둘 중 하나라도 자원을 모두 사용하거나, 서버 장애가 발생하면 전체 서비스가 완전히 죽는다.\n 서버 자원을 효율적으로 사용하기 어렵다. =\u0026gt; 애플리케이션, 데이터베이스가 각 속성에 따라 더 중요한 최적화를 필요한 설정이 다를 수 있음\n 보안 취약 =\u0026gt; 테이터 베이스는 보안상 포트나 IP등 접속 지점을 최소화, 웹은 특성상 다양한 IP 포트에 대해 요청받아야 함.\n 스케일 아웃(서버확장)이 어렵다. =\u0026gt; 서버가 여러대 되면 클라이언트가 여러대의 서버들의 주소를 모두 알아야 하므로 관리 어려움.\n  "},{"idx":3,"href":"/docs/blog/architecture/","title":"아키텍처 이해","content":" 아키텍처의 이해 서비스에 따른 애플리케이션, DB 서버 구성. 로드밸런서 구조를 설명\n단일서버 가장 기본적인 서버 구성으로 테스트 서버나, 간단한고 작은 서비스를 할 때 많이 사용된다.\n애플리케이션/데이터베이스 서버 분리 단일 서버 구성에서 데이터베이스를 별도의 서버로 분리한 구성.\n단일서버의 단점인 전체 서비스 장애 확률, 효율적인 자원 사용, 보안취약이 해결된다.\n로드밸런서 클라이언트는 로드 밸런서 서버와 통신하고 그 뒤에 여러 애플리케이션 서버를 두는 구성.\n"},{"idx":4,"href":"/docs/blog/aws/ec2/instancecreate/","title":"인스턴스 생성/접속","content":" 인스턴스 생성 위치 : 인스턴스 \u0026gt; 인스턴스 내 인스턴스들을 확인할 수 있는 목록\n1. 단계 1: AMI 선택 AMI(Amazon Machine Image)는 원하는 EC2 환경(OS, 애플리케이션 등)을 구성한 이미지로 EC2에 미리 셋팅한 AMI를 설정하는 구조다.\n2. 단계 2: 인스턴스 유형 선택 EC2 서버의 CPU, 메모리, 디스크 등 스펙을 설정한다.\n3. 단계 3: 인스턴스 세부 정보 구성 인스턴스 상세 정보 구성. (기본 값으로 두고 다음 진행)\n4. 단계 4: 스토리지 추가 인스턴스 스토리지 추가. (기본 값으로 두고 다음 진행)\n5. 단계 5: 태그 추가 인스턴스를 분류할 때 유용하게 사용 가능 (기본 값으로 두고 다음 진행)\n6. 단계 6: 보안 그룹 구성 보안을 위해 IP, Port를 이용해 정의해 두는 접속 규칙\n인스턴스 접근 제어를 위한 보안 그룹 구성. 생성하거나, 기존에 만들어 둔 보안 그룹이 있다면 사용 가능\n7. 단계 7: 인스턴스 시작 검토 인스턴스 생성 전에 설정한 정보들을 확인한다.\n8. 기존 키페어 선택 또는 새 키 페어 생성 서버에 접속하기 위한 공개 키 암호화 기법으로 서버에는 공개키(public key) 사용자는 개인 키(private key)를 가지고 접속함.\n키페어를 생성하거나, 기존에 만들어 둔 키를 설정한다.\n9. 생성된 인스턴스 확인 인스턴스 생성 전에 설정한 정보들을 확인한다. 퍼블릭 DNS와 IP가 호스트이며, 따로 설정하지 않았을 경우엔 유동IP로 설정되므로 서버 재부팅시 IP가 변경됨.\n인스턴스 접속 SSH 접속 설정  프로토콜 SSH 호스트 퍼블릭 DNS, IP 방법 Publick Key (공개 키 암호화 기법) 사용자 이름 ec2-usercentOS계열은 ec2-user, ubuntu계열은 ubuntu 입니다.) 사용자 키 인스턴스 생성시에 설정했던 pem키를 설정   EC2 서버 접속 화면 "},{"idx":5,"href":"/docs/blog/aws/","title":"AWS","content":" EC2(Amazon Web Service) "},{"idx":6,"href":"/docs/hugo/","title":"Hugo","content":" Hugo Static Site Generator\n정보 사이트 : https://gohugo.io/\n설치 사이트 : https://github.com/gohugoio/hugo/releases\n명령어 hugo 프로젝트 생성 (project 프로젝트명)\nhugo new site project  로컬서버 실행 localhost:1313\nhugo server -D  빌드하여 public폴더에 생성한다. (theme 테마명))\nhugo -t theme  "},{"idx":7,"href":"/docs/infra/","title":"infra","content":" INFRA 하드웨어, OS, 미들웨어, 네트워크 등의 시스템 기반\nHardware 하드웨어 서버 장비 본체나 데이터를 저장하기 위한 스토리지, 전원 장치 인프라 가장 low-level. CPU, 메모리, 데이터 스토리지 등\nNetwork 사용자가 원격으로 접근할 수 있도록 서버를 연결하는 도구들 MAC주소, IP주소 등\nOS 하드웨어와 네트워크 장비를 제어하기 위한 기본적인 소프트웨어 window, Linux 등\nMiddleware 미들웨어 웹서버, DBMS, 시스템 모니터링 툴등 비즈니스를 처리하는 애플리케이션의 각종 소프트웨어\n시스템 모니터링 System Monitoring Zabbix, Datadog, Mackerel 등\n"},{"idx":8,"href":"/docs/blog/architecture/separation/","title":"애플리케이션/데이터베이스 서버 분리","content":" 애플리케이션/데이터베이스 서버 분리 단일 서버 구성에서 데이터베이스를 별도의 서버로 분리한 구성.\n단일서버의 단점인 전체 서비스 장애 확률, 효율적인 자원 사용, 보안취약이 해결된다.\n장점\n 전체 서비스에 장애가 생길 확률이 높음이 개선 효율적인 자원 사용 개선 보안 취약 개선  단점\n 관리서버 증가. 네트워크 보안 고려. 스케일 아웃(서버확장)이 어렵다.  "},{"idx":9,"href":"/docs/blog/aws/ec2/webserver/","title":"웹서버","content":" 웹서버 Apache url https://www.apachelounge.com/download/\n window 계열은 위 주소에서 다운 리눅스 계열은 yum 설치  Apache 패키지 목록 명령어 $ yum list | grep httpd  httpd가 이름에 포함된 패키지 목록 확인.\nApache 2.2 패키지 명은 httpd 이며, 2.4 패키지 명은 httpd24이다.\nApache 설치 명령어 $ sudo yum install httpd24  Apache 시작/종료/재시작 // Apache 시작 $ sudo service httpd start // Apache 종료 $ sudo service httpd stop // Apache 재시작 $ sudo service httpd restart  Apache 접속 서버를 실행했는데도 아래와 같이 접속되지 않는다면, EC2 HTTP 보안그룹을 확인해 보자. "},{"idx":10,"href":"/docs/blog/architecture/loadbalancer/","title":"로드 밸런서","content":" 로드 밸런서 클라이언트는 로드 밸런서 서버와 통신하고 그 뒤에 여러 애플리케이션 서버를 두는 구성.\n장점\n 스케일 아웃이 가능. 애플리케이션 서버 중 일부 서버에 장애 발생 시 대응 가능 =\u0026gt; 정상 서버에만 요청을 가능하도록 할 수 있음.  단점\n 로드밸런서 서버 장애 시 연결된 모든 애플리케이션 서버 장애. =\u0026gt; 로드밸런서 서버를 통해 모든 요청과 응답이 이뤄지므로 애플리케이션 서버가 정상이여도 로드밸런서 서버가 장애가 날 경우 전체 서비스에 영향  "},{"idx":11,"href":"/docs/blog/aws/ec2/securitygroup/","title":"보안그룹","content":" 보안그룹 위치 인스턴스 \u0026gt; 네트워크 \u0026gt; 보안 그룹 변경\n인스턴스 방화벽(인바운드/아웃바운드)을 설정한다. EC2가 시작상태에서도 가능하다.\n보안 그룹 변경 팝업에서 원하는 보안 그룹을 설정한다. HTTP/HTTPS 위치 : 네트워크 및 보안 \u0026gt; 보안 그룹\nHTTP/HTTPS를 설정한다.\n"},{"idx":12,"href":"/categories/","title":"Categories","content":""},{"idx":13,"href":"/docs/","title":"Docs","content":""},{"idx":14,"href":"/","title":"Introduction","content":"main\n"},{"idx":15,"href":"/tags/","title":"Tags","content":""}];window.bookSearch={pages:pages,idx:lunr(function(){this.ref("idx");this.field("title");this.field("content");pages.forEach(this.add,this);}),}})();