<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AWS on 짜몽 기술 LAB</title>
    <link>https://jjamong.github.io/docs/aws/</link>
    <description>Recent content in AWS on 짜몽 기술 LAB</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 27 Oct 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jjamong.github.io/docs/aws/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>EC2</title>
      <link>https://jjamong.github.io/docs/aws/ec2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jjamong.github.io/docs/aws/ec2/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ELB 생성</title>
      <link>https://jjamong.github.io/docs/aws/ec2/elb/elbcreate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jjamong.github.io/docs/aws/ec2/elb/elbcreate/</guid>
      <description>위치 : EC2 서비스의 [로드 밸런싱] &amp;gt; [로드 밸런서]에서 로드 밸런서 생성을 선택한다.
일반적은 HTTP, HTTPS과련한 Application Load Balancer를 생성한다.
1. 로드 밸런서 구성 로드 밸런서의 이름, 리스너, 가용 영역을 지정한다.
2. 보안 설정 구성 HTTPS를 추가하지 않으면 경고창이 출력된다. 무시할 수 있다.
3. 보안 설정 구성 ec2에 웹서버를 설치해 두었으므로 웹 접속으로 elb를 확인할 것이다. 따라서 그와 관련된 보안 그룹을 설정한다.
4. 라우팅 구성 로드 밸런서가 클라이언트로부터 받은 요청을 전달할 대상 그룹을 설정하는 화면이다.</description>
    </item>
    
    <item>
      <title>ELB 테스트</title>
      <link>https://jjamong.github.io/docs/aws/ec2/elb/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jjamong.github.io/docs/aws/ec2/elb/test/</guid>
      <description>테스트 방법은 ELB에 속한 Auto Scaling 그룹을 2개 인스턴스가 동작하도록 설정후에, 한대의 웹서버를 stop하고, elb URL 로 접속/새로고침 시마다 ec2 웹사이트 상태를 확인한다.
1. Auto Sacling 그룹 EC2 2대 설정 위치 : 서비스의 [AUTO SCALING] &amp;gt; [Auto Scaling 그룹]
편집을 통해 목표용량, 최소, 최대를 2대로 설정한다.
2. 대상 그룹 설정 변경 위치 : 서비스의 [로드 밸런싱] &amp;gt; [대상 그룹]
대상 그룹의 상태 검사 편집을 통해 아래와 같이 설정한다. 경로와 상태코드를 통해 연결된 ec2 상태를 확인하므로 반드시 설정에 맞아야 한다.</description>
    </item>
    
    <item>
      <title>stress 명령어 테스트</title>
      <link>https://jjamong.github.io/docs/aws/ec2/autoscaling/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jjamong.github.io/docs/aws/ec2/autoscaling/test/</guid>
      <description>1. stress 명령어 테스트 위치 : 서비스의 [AUTO SCALING] &amp;gt; [Auto Scaling 그룹]
인스턴스 탭에 1개의 인스턴스가 존재한다.
현재 인스턴스에 사용량 지표를 기본 5분에 한 번 씩만 모니터링 서버로 전송하고 있다. (기본 시간 변경 시 추가비용 발생)
실행 되고 있는 EC2 서버에 접속하여 명령어들 차례로 실행한다.
설치 명령어
$ sudo yum install stess -y  600초 동안 1개의 CPU 사용량을 최대로 늘린다.
stess --cpu 1 --timeout 600  5 ~ 10 분을 기다리면 인스턴스가 1대더 추가됨을 확인 할 수 있으며, 그 이후로는 다시 정상적으로 1대로 줄어든다.</description>
    </item>
    
    <item>
      <title>그룹 생성</title>
      <link>https://jjamong.github.io/docs/aws/ec2/autoscaling/groupcreate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jjamong.github.io/docs/aws/ec2/autoscaling/groupcreate/</guid>
      <description>1. AMI 생성 위치 : 서비스의 [인스턴스] &amp;gt; [인스턴스]
인스턴스 중지 상태에서, 이미지 -&amp;gt; 이미지 생성을 선택한다.
이미지 이름을 입력하고 이미지 생성 버튼을 선택한다.
이미지 생성 성공 화면이며, 보유 중인 이미지를 선택하면 이미지 목록으로 이동한다.
위치 : 서비스의 [이미지] &amp;gt; [AMI]
그림과 같이 상태가 available로 표기 되면 생성이 완료된 것이다.
2. 시작 템플릿 생성 위치 : 서비스의 [인스턴스] &amp;gt; [시작 템플릿]
 시작 템플릿 이름 : ec2-launch-template AMI ID : Search for AMI를 선택하여 생성한 AMI를 선택한다.</description>
    </item>
    
    <item>
      <title>서버 구성</title>
      <link>https://jjamong.github.io/docs/aws/ec2/autoscaling/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jjamong.github.io/docs/aws/ec2/autoscaling/configuration/</guid>
      <description>기본 구성 AWS Auto Scaling(오토 스케일링) 그룹은 AWS에서 제공하는 자동 다중 서버 서비스다. 같은 사양, 환경, 코드를 가진 똑같은 EC2 인스턴스 묶음이며, AMI를 이용하기 때문에 같은 서버를 구성할 수 있다.
서비스에 사용자가 몰리는 경우에 따라 서버의 수를 자동으로 늘리고 줄이기 때문에 24시간 켜놓는 것보다 비용절감이 된다.
오토 스케일링 응용 CPU 사용량 정책 예를 들어, 평균 CPU 사용량 정책에 따라 평소 EC2 3대로 요청을 처리하다가, 사용량이 많아져 10분동안 평균 CPU 사용량이 90% 이상을 넘어서면, Auto Scaling그룹에서 똑같은 EC2를 증설한다.</description>
    </item>
    
    <item>
      <title>서버 아키텍처</title>
      <link>https://jjamong.github.io/docs/aws/ec2/architecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jjamong.github.io/docs/aws/ec2/architecture/</guid>
      <description>단일서버 가장 기본적인 서버 구성으로 테스트 서버나, 간단한고 작은 서비스를 할 때 많이 사용된다.
클라이언트는 웹, 애플리케이션은 웹서버, 데이터베이스는 Mysql과 같은 RDB 등으로 생각할 수 있다.
장점  환경 구축이 쉬움  단점  전체 서비스에 장애가 생길 확률이 높음 =&amp;gt; 애플리케이션, 데이터베이스가 같은 자원(CPU, 메모리 등)을 공유하므로 둘 중 하나라도 자원을 모두 사용하거나, 서버 장애가 발생하면 전체 서비스가 완전히 죽는다.
 서버 자원을 효율적으로 사용하기 어렵다. =&amp;gt; 애플리케이션, 데이터베이스가 각 속성에 따라 더 중요한 최적화를 필요한 설정이 다를 수 있음</description>
    </item>
    
    <item>
      <title>인스턴스 생성/접속</title>
      <link>https://jjamong.github.io/docs/aws/ec2/instancecreate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jjamong.github.io/docs/aws/ec2/instancecreate/</guid>
      <description>위치 : 인스턴스 &amp;gt; 인스턴스
인스턴스 목록을 확인할 수 있다.
인스턴스 시작 버튼을 선택하여 인스턴스를 생성한다.
1. 단계 1: AMI 선택 AMI(Amazon Machine Image)는 원하는 EC2 환경(OS, 애플리케이션 등)을 구성한 이미지로 EC2에 미리 셋팅한 AMI를 설정하는 구조다.
2. 단계 2: 인스턴스 유형 선택 EC2 서버의 CPU, 메모리, 디스크 등 스펙을 설정한다.
3. 단계 3: 인스턴스 세부 정보 구성 인스턴스 상세 정보 구성. (기본 값으로 두고 다음 진행)
4. 단계 4: 스토리지 추가 인스턴스 스토리지 추가.</description>
    </item>
    
    <item>
      <title>웹서버</title>
      <link>https://jjamong.github.io/docs/aws/ec2/webserver/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jjamong.github.io/docs/aws/ec2/webserver/</guid>
      <description>웹서버 Apache url https://www.apachelounge.com/download/
 window 계열은 위 주소에서 다운 리눅스 계열은 yum 설치  Apache 패키지 목록 명령어 $ yum list | grep httpd  httpd가 이름에 포함된 패키지 목록 확인.
Apache 2.2 패키지 명은 httpd 이며, 2.4 패키지 명은 httpd24이다.
Apache 설치 명령어 $ sudo yum install httpd24  Apache 시작/종료/재시작 // Apache 시작 $ sudo service httpd start // Apache 종료 $ sudo service httpd stop // Apache 재시작 $ sudo service httpd restart  Apache 접속 서버를 실행했는데도 아래와 같이 접속되지 않는다면, EC2 HTTP 보안그룹을 확인해 보자.</description>
    </item>
    
    <item>
      <title>보안그룹</title>
      <link>https://jjamong.github.io/docs/aws/ec2/securitygroup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jjamong.github.io/docs/aws/ec2/securitygroup/</guid>
      <description>보안그룹 위치 인스턴스 &amp;gt; 네트워크 &amp;gt; 보안 그룹 변경
인스턴스 방화벽(인바운드/아웃바운드)을 설정한다. EC2가 시작상태에서도 가능하다.
보안 그룹 변경 팝업에서 원하는 보안 그룹을 설정한다. HTTP/HTTPS 위치 : 네트워크 및 보안 &amp;gt; 보안 그룹
HTTP/HTTPS를 설정한다.</description>
    </item>
    
  </channel>
</rss>